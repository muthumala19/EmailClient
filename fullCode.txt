package com.company.TestRuns;
//place the package name here

//I wrote every .java file in a particular package, but for evaluation purposes, those package names were deleted.

//200405B-MUTHUMALA L.G.P

import javax.mail.*;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import java.io.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Properties;
import java.util.Scanner;


interface Recipient extends Serializable {
    String getEmail();

    Recipient setEmail(String email);

    String getType();

    LocalDate getBirthDay();

    Recipient setBirthDay(String birthDay);

    String getData();

    Recipient setName(String name);

    Recipient setNickName(String nickName);

    Recipient setDesignation(String designation);

}


interface Mail extends Serializable {

    Mail setSubject();

    String getSubject();

    Mail setMessage();

    String getMessage();

    String getTo();

    Mail setTo(String to);


}


class OfficeFriendRecipient implements Recipient {
    private final String type = "Office_friend";
    private LocalDate formattedBirthday;
    private String name;
    private String email;
    private String designation;
    private String birthDay;
    private String record;

    @Override
    public Recipient setName(String name) {
        this.name = name;
        return this;
    }

    @Override
    public Recipient setNickName(String nickName) {
        return this;
    }

    @Override
    public Recipient setEmail(String email) {
        this.email = email;
        return this;
    }

    @Override
    public Recipient setBirthDay(String birthDay) {
        this.formattedBirthday = LocalDate.parse(birthDay);
        this.birthDay = Operations.dateFormatter("yyyy/MM/dd", this.formattedBirthday);
        return this;
    }

    @Override
    public Recipient setDesignation(String designation) {
        this.designation = designation;
        return this;
    }


    @Override
    public String getEmail() {
        return this.email;
    }

    @Override
    public String getType() {
        return this.type;
    }

    @Override
    public LocalDate getBirthDay() {
        return this.formattedBirthday;
    }

    @Override
    public String getData() {
        if (this.record == null)
            this.record = this.type + " : " + this.name + "," + this.email + "," + "," + this.designation + "," + this.birthDay;
        return this.record;
    }
}


class OfficialRecipient implements Recipient {

    private final String type = "Official";
    private String name;
    private String email;
    private String designation;
    private String record;

    @Override
    public Recipient setName(String name) {
        this.name = name;
        return this;
    }

    @Override
    public Recipient setNickName(String nickName) {
        return null;
    }

    @Override
    public Recipient setEmail(String email) {
        this.email = email;
        return this;
    }

    @Override
    public Recipient setDesignation(String designation) {
        this.designation = designation;
        return this;
    }

    @Override
    public Recipient setBirthDay(String birthDay) {
        return this;
    }

    @Override
    public String getEmail() {
        return this.email;
    }

    @Override
    public String getType() {
        return this.type;
    }

    @Override
    public LocalDate getBirthDay() {
        return null;
    }

    @Override
    public String getData() {
        if (this.record == null)
            this.record = this.type + " : " + this.name + "," + this.email + "," + this.designation;
        return this.record;
    }
}


class PersonalRecipient implements Recipient {
    private final String type = "Personal";
    private LocalDate formattedBirthday;
    private String name;
    private String email;
    private String nickName;
    private String birthDay;
    private String record;

    @Override
    public Recipient setName(String name) {
        this.name = name;
        return this;
    }

    @Override
    public Recipient setNickName(String nickName) {
        this.nickName = nickName;
        return this;
    }

    @Override
    public Recipient setEmail(String email) {
        this.email = email;
        return this;
    }

    @Override
    public Recipient setBirthDay(String birthDay) {
        this.formattedBirthday = LocalDate.parse(birthDay);
        this.birthDay = Operations.dateFormatter("yyyy/MM/dd", this.formattedBirthday);
        return this;
    }

    @Override
    public Recipient setDesignation(String designation) {
        return this;
    }


    @Override
    public String getEmail() {
        return this.email;
    }

    @Override
    public String getType() {
        return this.type;
    }

    @Override
    public LocalDate getBirthDay() {
        return this.formattedBirthday;
    }

    @Override
    public String getData() {
        if (this.record == null)
            this.record = this.type + " : " + this.name + "," + this.nickName + "," + this.email + "," + this.birthDay;
        return this.record;
    }

}


class RecipientFactory {

    public static Recipient createRecipient(String[] details) {

        switch (details[0].toLowerCase()) {

            case "personal":

                return new PersonalRecipient().setName(details[1]).setEmail(details[2]).setNickName(details[3]).setBirthDay(details[4]);

            case "official":

                return new OfficialRecipient().setName(details[1]).setEmail(details[2]).setDesignation(details[3]);

            case "office_friend":
                return new OfficeFriendRecipient().setName(details[1]).setEmail(details[2]).setDesignation(details[3]).setBirthDay(details[4]);

            default:
                System.out.print("Invalid Recipient Type.! ");
                return null;
        }

    }
}


abstract class DataManager {

    public static void writeFile(String fileName, String message) {
        try (FileWriter fw = new FileWriter(fileName, true); BufferedWriter writer = new BufferedWriter(fw)) {
            writer.write(message);
            writer.newLine();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public static ArrayList<String> readFile(String fileName) {
        File file = new File(fileName);
        try {
            file.createNewFile();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        try (FileReader fr = new FileReader(file); BufferedReader reader = new BufferedReader(fr)) {
            String line;
            ArrayList<String> arrayList = new ArrayList<>();
            while ((line = reader.readLine()) != null) arrayList.add(line);
            return arrayList;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public static <T> void serializeFile(String fileName, T recipient) {
        File file = new File(fileName);
        try (FileOutputStream fos = new FileOutputStream(file); ObjectOutputStream oos = new ObjectOutputStream(fos)) {
            oos.writeObject(recipient);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    @SuppressWarnings("unchecked")
    public static <T> T deserializeFile(String fileName, Object obj) {
        File file = new File(fileName);
        try {
            file.createNewFile();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        if (file.length() == 0) return (T) obj;
        try (FileInputStream fis = new FileInputStream(file); ObjectInputStream ois = new ObjectInputStream(fis)) {
            return (T) ois.readObject();
        } catch (IOException | ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }
}


class MailData implements Serializable {
    private final Mail mailAddress;
    private String record;

    public MailData(Mail mailAddress) {
        this.mailAddress = mailAddress;
        setRecord();
    }

    public String getRecord() {
        return record;
    }

    public void setRecord() {
        this.record = "Sub : " + mailAddress.getSubject() + " , message : " + mailAddress.getMessage() + "-" + RecipientData.author;
    }


}


class RecipientData {
    public static LocalDate date = null;
    public static LocalDate today = LocalDate.now();
    public static String author = "pasindu muthumala";
    public static ArrayList<String> recipientRecords = new ArrayList<>();
    public static HashMap<String, Recipient> recipients = new HashMap<>();
    public static HashMap<String, ArrayList<Recipient>> birthDayRecords = new HashMap<>();
    public static HashMap<String, ArrayList<MailData>> sentMails = new HashMap<>();
}


class PersonalBirthdayMail implements Mail {
    private String to;
    private String subject;
    private String message;

    @Override
    public Mail setSubject() {
        this.subject = "Birthday Wishes.!";
        return this;
    }

    @Override
    public String getSubject() {
        return this.subject;
    }

    @Override
    public Mail setMessage() {
        this.message = "hugs and love on your birthday";
        return this;
    }

    @Override
    public String getMessage() {
        return this.message;
    }

    @Override
    public Mail setTo(String to) {
        this.to = to;
        return this;
    }

    @Override
    public String getTo() {
        return this.to;
    }
}


class OfficeFriendMail implements Mail {
    private String to;
    private String subject;
    private String message;


    @Override
    public Mail setSubject() {
        this.subject = "Birthday Wishes.!";
        return this;
    }

    @Override
    public String getSubject() {
        return this.subject;
    }

    @Override
    public Mail setMessage() {
        this.message = "Wish you a Happy Birthday";
        return this;
    }

    @Override
    public String getMessage() {
        return this.message;
    }

    @Override
    public Mail setTo(String to) {
        this.to = to;
        return this;
    }

    @Override
    public String getTo() {
        return this.to;
    }
}


class NormalMail implements Mail {
    private static final Scanner scanner = new Scanner(System.in);
    private String to;
    private String subject;
    private String message;

    @Override
    public Mail setSubject() {
        System.out.print("Enter Subject : ");
        this.subject = scanner.nextLine();
        return this;
    }

    @Override
    public String getSubject() {
        return this.subject;
    }

    @Override
    public Mail setMessage() {
        System.out.print("Enter Message : ");
        this.message = scanner.nextLine();
        return this;
    }

    @Override
    public String getMessage() {
        return this.message;
    }

    @Override
    public Mail setTo(String to) {
        this.to = to;
        return this;
    }

    @Override
    public String getTo() {
        return this.to;
    }
}


class MailFactory {
    public static Mail createNormalMail(String emailAddress) {
        return new NormalMail().setTo(emailAddress).setSubject().setMessage();
    }

    public static Mail createBirthdayMail(String type, String emailAddress) {
        switch (type) {
            case "Personal" : return new PersonalBirthdayMail().setTo(emailAddress).setSubject().setMessage();
            case "Office_Friend" : return new OfficeFriendMail().setTo(emailAddress).setSubject().setSubject();
            default : throw new IllegalStateException("Unexpected value: " + type);
        }
    }

    //check whether the given email address is valid or not
    public static boolean isNotValidEmailAddress(String email) {
        boolean result = true;
        try {
            InternetAddress emailAddress = new InternetAddress(email);
            emailAddress.validate();
        } catch (AddressException ex) {
            result = false;
            System.out.println("Invalid Email Alert : " + email);
        }
        return !result;
    }
}


class MailServer {


    public static void mailServer(Mail email, String recipients) {

        final String username = "muthumalatestmail@gmail.com";
        final String password = "dmuhwiqzfnpoeihx";

        Properties prop = new Properties();
        prop.put("mail.smtp.host", "smtp.gmail.com");
        prop.put("mail.smtp.port", "587");
        prop.put("mail.smtp.auth", "true");
        prop.put("mail.smtp.starttls.enable", "true"); //TLS

        Session session = Session.getInstance(prop, new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        });

        try {

            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress("muthumalatestmail@gmail.com"));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipients));
            message.setSubject(email.getSubject());
            message.setText(email.getMessage());
            Transport.send(message);
//            System.out.println("Done");
        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }

}


class Main {

    public static void main(String[] args) {

//        Operations.clearData();
        Operations.loadData();
        Scanner scanner = new Scanner(System.in);
        System.out.println("""
                Enter option type:\s
                1 - Adding a new recipient
                2 - Sending an email
                3 - Printing out all the recipients who have birthdays
                4 - Printing out details of all the emails sent
                5 - Printing out the number of recipient objects in the application""");

        int option = scanner.nextInt();

        switch (option) {
            case 1 -> Operations.createRecipient();
            case 2 -> Operations.sendNormalMail();
            case 3 -> Operations.printBirthDays();
            case 4 -> Operations.showSendMails();
            case 5 -> Operations.getNoOfRecipient();
        }
        Operations.sendBirthdayMail();
        Operations.releaseData();
    }
}

abstract class Operations {
    private static final Scanner scanner = new Scanner(System.in);

    //when it is wanted to clear data
    public static void clearData() {
        releaseData();
    }

    public static void getNoOfRecipient() {
        System.out.println(RecipientData.recipients.size());
    }

    //load all the data from files
    public static void loadData() {
        RecipientData.recipientRecords = DataManager.readFile("clientList.txt");
        RecipientData.date = DataManager.deserializeFile("date.ser", RecipientData.date);
        RecipientData.recipients = DataManager.deserializeFile("recipients.ser", RecipientData.recipients);
        RecipientData.birthDayRecords = DataManager.deserializeFile("birthdays.ser", RecipientData.birthDayRecords);
        RecipientData.sentMails = DataManager.deserializeFile("userData.ser", RecipientData.sentMails);
    }

    //store all the data to files
    public static void releaseData() {
        DataManager.serializeFile("date.ser", RecipientData.today);
        DataManager.serializeFile("recipients.ser", RecipientData.recipients);
        DataManager.serializeFile("birthdays.ser", RecipientData.birthDayRecords);
        DataManager.serializeFile("userData.ser", RecipientData.sentMails);
    }

    //print all the recipients who have birthdays for a given date
    public static void printBirthDays() {
        System.out.println("Enter date : ");
        String date = Operations.dateFormatter("MM/dd", LocalDate.parse(scanner.next()));
        if (!RecipientData.birthDayRecords.containsKey(date))
            System.out.println("No current recipients have birthdays on that day");
        else for (Recipient details : RecipientData.birthDayRecords.get(date)) System.out.println(details.getData());
    }

    //update all the  user details to relevant locations
    private static void update(Recipient user) {
        String date = dateFormatter("MM/dd", user.getBirthDay());
        if (!RecipientData.birthDayRecords.containsKey(date)) {
            RecipientData.birthDayRecords.put(date, new ArrayList<>());
        }
        RecipientData.recipients.put(user.getEmail(), user);
        RecipientData.birthDayRecords.get(date).add(user);
        DataManager.writeFile("clientList.txt", user.getData());
        RecipientData.recipientRecords.add(user.getData());
    }

    //format LocalDate object to String of given pattern
    public static String dateFormatter(String pattern, LocalDate date) {
        DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern(pattern);
        return date.format(myFormatObj);

    }

    //send birthday mails automatically
    public static void sendBirthdayMail() {
        if (RecipientData.today.equals(RecipientData.date)) return;
        String today = Operations.dateFormatter("MM/dd", RecipientData.today);
        if (RecipientData.birthDayRecords.get(today) == null) return;
        for (Recipient r : RecipientData.birthDayRecords.get(today)) {
            Mail e = MailFactory.createBirthdayMail(r.getType(), r.getEmail());
            updateEmailList(e, r.getEmail());
        }
    }

    //send normal mails
    public static void sendNormalMail() {
        System.out.print("Enter Recipients : ");
        String to = scanner.nextLine();
        String[] toList = to.strip().split("[, ]+");
        for (String email : toList) {
            if (MailFactory.isNotValidEmailAddress(email)) return;
            Mail e = MailFactory.createNormalMail(to);
            updateEmailList(e, to);
        }
    }

    //update email details when an email has sent
    private static void updateEmailList(Mail e, String to) {
        String today = Operations.dateFormatter("yyyy/MM/dd", RecipientData.today);
        if (!RecipientData.sentMails.containsKey(today)) RecipientData.sentMails.put(today, new ArrayList<>());
        RecipientData.sentMails.get(today).add(new MailData(e));
        MailServer.mailServer(e, to);
    }

    //show all the mails sent in a given date
    public static void showSendMails() {
        System.out.println("Enter date : ");
        String date = Operations.dateFormatter("yyyy/MM/dd", LocalDate.parse(scanner.next()));
        if (RecipientData.sentMails.get(date) == null) {
            System.out.println("No one has Birthdays " + date);
            return;
        }
        for (MailData e : RecipientData.sentMails.get(date)) System.out.println(e.getRecord());
    }

    //create new recipient
    public static void createRecipient() {
        System.out.print("""
                            Enter recipient : \s
                                Ex :
                                Personal : <name> <email address> <nick name> <birthday YYYY-MM-DD>
                                Official : <name> <email address> <designation>
                                Official_Friend : <name> <email address> <designation> <birthday YYYY-MM-DD>
                                """);
        String[] details = scanner.nextLine().strip().split("[,: ]+");
        if (MailFactory.isNotValidEmailAddress(details[2])) return;
        if (RecipientData.recipients.containsKey(details[2])) {
            System.out.println("Already exist user.!");
            return;
        }
        Recipient user = RecipientFactory.createRecipient(details);
        if (user != null) update(user);
    }
}



